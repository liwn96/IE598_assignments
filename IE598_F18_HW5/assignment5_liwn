# -*- coding: utf-8 -*-
"""
Created on Thu Sep 27 08:15:11 2018

@author: wn li
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plot
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.decomposition import PCA
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
from sklearn.decomposition import KernelPCA as KPCA
from matplotlib.colors import ListedColormap

def plot_decision_regions(X, y, classifier, resolution=0.02):

    # setup marker generator and color map
    markers = ('s', 'x', 'o', '^', 'v')
    colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')
    cmap = ListedColormap(colors[:len(np.unique(y))])

    # plot the decision surface
    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),
                           np.arange(x2_min, x2_max, resolution))
    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)
    Z = Z.reshape(xx1.shape)
    plot.contourf(xx1, xx2, Z, alpha=0.4, cmap=cmap)
    plot.xlim(xx1.min(), xx1.max())
    plot.ylim(xx2.min(), xx2.max())

    # plot class samples
    for idx, cl in enumerate(np.unique(y)):
        plot.scatter(x=X[y == cl, 0], 
                    y=X[y == cl, 1],
                    alpha=0.6, 
                    c=cmap(idx),
                    edgecolor='black',
                    marker=markers[idx], 
                    label=cl)

dataset=pd.read_csv("wine.csv")

print("Number of Rows of Data = ", dataset.shape[0])
print("Number of Columns of Data = ", dataset.shape[1])

dataset.head().to_excel('1.xlsx')
summary=dataset.describe()
summary.to_excel('2.xlsx')

#Standardized data
dataset_std=dataset.iloc[:,0:13]
for i in range(13):
    mean=summary.iloc[1,i]
    sd=summary.iloc[2,i]
    dataset_std.iloc[:,i:(i+1)]=(dataset_std.iloc[:,i:(i+1)]-mean)/sd
dataset_std=pd.concat([dataset_std,dataset.iloc[:,13]],axis=1)
    
summary1=dataset_std.describe()
summary1.to_excel('3.xlsx')

cols = dataset.columns[0:13]
array=dataset_std.iloc[:,0:13].values
plot.boxplot(array,labels= cols)
plot.xticks(rotation=90)
plot.show()

sns.pairplot(dataset[cols], size=2.5)
plot.tight_layout()
plot.show()

cm = np.corrcoef(dataset[cols].values.T)
sns.set(font_scale=1)
hm = sns.heatmap(cm, 
           cbar=True,
           annot=True, 
           square=True,
           fmt='.2f',
           annot_kws={'size': 8},
           yticklabels=cols,
           xticklabels=cols)
plot.show()

#Parallel coordinates graph
for i in range(178):
    if dataset_std.iat[i,13] == 1:
        pcolor = "red"
    elif dataset_std.iat[i,13]==2:
        pcolor = "blue"
    else:
        pcolor = "yellow"
    dataRow = dataset_std.iloc[i,0:13]
    dataRow.plot(color=pcolor)
plot.xlabel("Attribute Index")
plot.ylabel(("Attribute Values"))
plot.show()

X,y=dataset_std.iloc[:,0:13].values, dataset_std.iloc[:,13].values
X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.2,random_state=42,stratify=y)

#Logistic regression classifier
lr=LogisticRegression()
lr.fit(X_train,y_train)
print('baseline cv of lr:', cross_val_score(lr, X_train, y_train, cv=5).mean())
print('baseline ts of lr:', lr.score(X_test,y_test))

#SVM
svm=SVC(kernel='linear', C=1.0)
svm.fit(X_train,y_train)
print('baseline cv of svm:', cross_val_score(svm,X_train,y_train,cv=5).mean())
print('baseline ts of lr:', svm.score(X_test,y_test))

#PCA transform
pca=PCA(n_components=None)
X_train_pca=pca.fit_transform(X_train)
var_exp=pca.explained_variance_ratio_
cum_var_exp=np.cumsum(var_exp)
def cum_var_exp_plot(var_exp,cum_var_exp):
    plot.bar(range(1,14), var_exp, alpha=0.5, align='center',
             label='individual explained variance')
    plot.step(range(1,14), cum_var_exp, where='mid',label='cumulative explained variance')
    plot.ylabel('Explained variance ratio')
    plot.xlabel('Principal component index')
    plot.legend(loc='best')
    plot.show()
cum_var_exp_plot(var_exp,cum_var_exp)

pca=PCA(n_components=5)
X_train_pca=pca.fit_transform(X_train)
X_test_pca=pca.transform(X_test)
lr=LogisticRegression()
lr.fit(X_train_pca,y_train)
print('PCA cv of lr:', cross_val_score(lr, X_train_pca, y_train, cv=5).mean())
print('PCA ts of lr:', lr.score(X_test_pca,y_test))
svm=SVC(kernel='linear', C=1.0)
svm.fit(X_train_pca,y_train)
print('PCA cv of svm:', cross_val_score(svm, X_train_pca, y_train, cv=5).mean())
print('PCA ts of svm:', svm.score(X_test_pca,y_test))

#LDA transform
lda=LDA(n_components=None)
X_train_lda=lda.fit_transform(X_train,y_train)
var_exp=lda.explained_variance_ratio_
cum_var_exp=np.cumsum(var_exp)
plot.bar(range(1,3), var_exp, alpha=0.5, align='center',
         label='individual explained variance')
plot.step(range(1,3), cum_var_exp, where='mid',label='cumulative explained variance')
plot.ylabel('Explained variance ratio')
plot.xlabel('Principal component index')
plot.legend(loc='best')
plot.show()

lda=LDA(n_components=2)
X_train_lda=lda.fit_transform(X_train, y_train)
X_test_lda=lda.transform(X_test)
lr=LogisticRegression()
lr.fit(X_train_lda,y_train)
print('LDA cv of lr:', cross_val_score(lr, X_train_lda, y_train, cv=5).mean())
print('LDA ts of lr:', lr.score(X_test_lda,y_test))
svm=SVC(kernel='linear', C=1.0)
svm.fit(X_train_lda,y_train)
print('LDA cv of svm:', cross_val_score(svm, X_train_lda, y_train, cv=5).mean())
print('LDA ts of svm:', svm.score(X_test_lda,y_test))

plot_decision_regions(X_train_lda, y_train, classifier=lr)
plot.xlabel('LD 1')
plot.ylabel('LD 2')
plot.legend(loc='lower left')
plot.show()
plot_decision_regions(X_test_lda, y_test, classifier=lr)
plot.xlabel('LD 1')
plot.ylabel('LD 2')
plot.legend(loc='lower left')
plot.show()
plot_decision_regions(X_train_lda, y_train, classifier=svm)
plot.xlabel('LD 1')
plot.ylabel('LD 2')
plot.legend(loc='lower left')
plot.show()
plot_decision_regions(X_test_lda, y_test, classifier=svm)
plot.xlabel('LD 1')
plot.ylabel('LD 2')
plot.legend(loc='lower left')
plot.show()

#KPCA
lr_vs_score=[]
lr_test_score=[]
svm_vs_score=[]
svm_test_score=[]
a = np.arange(0.05,1,0.05)
for i in range(len(a)):
    kpca=KPCA(n_components=2,kernel='rbf',gamma=a[i])
    X_train_kpca=kpca.fit_transform(X_train)
    X_test_kpca=kpca.transform(X_test)
    lr=LogisticRegression()
    lr.fit(X_train_kpca,y_train)
    lr_vs_score.append(cross_val_score(lr,X_train_kpca,y_train).mean())
    lr_test_score.append(lr.score(X_test_kpca,y_test))
    svm=SVC(kernel='linear', C=1.0)
    svm.fit(X_train_kpca,y_train)
    svm_vs_score.append(cross_val_score(svm,X_train_kpca,y_train).mean())
    svm_test_score.append(svm.score(X_test_kpca,y_test))
lr_optimal_index=lr_test_score.index(max(lr_test_score))
gamma_lr_optimal=a[lr_optimal_index]
print('test accuracy of logistic regression is: ', lr_test_score)
print()
print('optimal gamma:', gamma_lr_optimal)
print('vs score:', lr_vs_score[lr_optimal_index])
print()
svm_optimal_index=svm_test_score.index(max(svm_test_score))
gamma_svm_optimal=a[svm_optimal_index]
print('test accuracy of svm is: ', svm_test_score)
print()
print('optimal gamma:', gamma_svm_optimal)
print('vs score:', svm_vs_score[svm_optimal_index])

kpca=KPCA(n_components=2,kernel='rbf',gamma=0.05)
X_train_kpca=kpca.fit_transform(X_train)
X_test_kpca=kpca.transform(X_test)
lr=LogisticRegression()
lr.fit(X_train_kpca,y_train)
svm=SVC(kernel='linear', C=1.0)
svm.fit(X_train_kpca,y_train)
plot_decision_regions(X_train_kpca, y_train, classifier=lr)
plot.xlabel('PC 1')
plot.ylabel('PC 2')
plot.legend(loc='lower left')
plot.show()
plot_decision_regions(X_test_kpca, y_test, classifier=lr)
plot.xlabel('PC 1')
plot.ylabel('PC 2')
plot.legend(loc='lower left')
plot.show()
plot_decision_regions(X_train_kpca, y_train, classifier=svm)
plot.xlabel('PC 1')
plot.ylabel('PC 2')
plot.legend(loc='lower left')
plot.show()
plot_decision_regions(X_test_kpca, y_test, classifier=svm)
plot.xlabel('PC 1')
plot.ylabel('PC 2')
plot.legend(loc='lower left')
plot.show()

print("My name is LI WENNING")
print("My NetID is: wenning5")
print("I hereby certify that I have read the University policy on Academic Integrity and that I am not in violation.")
