# -*- coding: utf-8 -*-
"""
Created on Sat Sep 22 12:04:36 2018

@author: wn li
"""

import pandas as pd
import numpy as np
import pylab
import scipy.stats as stats
import seaborn as sns
import matplotlib.pyplot as plot
from sklearn import linear_model
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import Ridge
from sklearn.linear_model import Lasso
from sklearn.linear_model import ElasticNet
dataset=pd.read_csv("concrete(1).csv")

print("Number of Rows of Data = ", dataset.shape[0])
print("Number of Columns of Data = ", dataset.shape[1])

dataset.head().to_excel('1.xlsx')
summary=dataset.describe()
summary.to_excel('2.xlsx')

def datatypes(k):
    print("column",k,":",dataset.iloc[:,k].dtype)
for k in range(dataset.shape[1]):
    datatypes(k)
        
def quantile(k):
    print(np.percentile(dataset.iloc[:,k],[0,25,50,75,100]))
for k in range(dataset.shape[1]):
    quantile(k)

array=dataset.iloc[:,0:9].values
plot.boxplot(array,labels= ['cement', 'slag', 'ash', 'water', 'superplastic','coarseagg','fineagg','age','strength'])
plot.show()

#Standardized data
dataset_std=dataset.iloc[:,0:9]
for i in range(9):
    mean=summary.iloc[1,i]
    sd=summary.iloc[2,i]
    dataset_std.iloc[:,i:(i+1)]=(dataset_std.iloc[:,i:(i+1)]-mean)/sd
    
summary1=dataset_std.describe()
summary1.to_excel('2.xlsx','Sheet2')
    
array1=dataset_std.iloc[:,0:9].values
plot.boxplot(array1,labels= ['cement', 'slag', 'ash', 'water', 'superplastic','coarseagg','fineagg','age','strength'])
plot.show()
    
cols = ['cement', 'slag', 'ash', 'water', 'superplastic','coarseagg','fineagg','age','strength']
sns.pairplot(dataset[cols], size=2.5)
plot.tight_layout()
plot.show()

cm = np.corrcoef(dataset[cols].values.T)
sns.set(font_scale=1.5)
hm = sns.heatmap(cm, 
           cbar=True,
           annot=True, 
           square=True,
           fmt='.2f',
           annot_kws={'size': 10},
           yticklabels=cols,
           xticklabels=cols)
plot.show()

X,y=dataset_std.iloc[:,0:8].values, dataset_std.iloc[:,8].values
y=y.reshape(-1,1)
X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.2,random_state=42)

#regression
reg=linear_model.LinearRegression()
reg.fit(X_train,y_train)
print("Intercept:",reg.intercept_)
print("Coefficients",list(zip(['cement', 'slag', 'ash', 'water', 'superplastic','coarseagg','fineagg','age'],reg.coef_.tolist()[0])))
y_train_pred_lr=reg.predict(X_train)
y_test_pred_lr=reg.predict(X_test)
print('MSE train: %.3f, test: %.3f' % (mean_squared_error(y_train, y_train_pred_lr),mean_squared_error(y_test, y_test_pred_lr)))
print('R square train: %.3f, test: %.3f' %(reg.score(X_train,y_train),reg.score(X_test, y_test)))

def residual_plot(y_train_pred,y_test_pred,y_train,y_test):
    plot.scatter(y_train_pred,  y_train_pred - y_train,
            c='steelblue', marker='o', edgecolor='white',
            label='Training data')
    plot.scatter(y_test_pred,  y_test_pred - y_test,
            c='limegreen', marker='s', edgecolor='white',
            label='Test data')
    plot.xlabel('Predicted values')
    plot.ylabel('Residuals')
    plot.legend(loc='upper left')
    plot.hlines(y=0, xmin=-2, xmax=3, color='black', lw=2)
    plot.xlim([-2, 3])
    plot.show()
    
residual_plot(y_train_pred_lr,y_test_pred_lr,y_train,y_test)

#part 3.1
alpha=[0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,1,10,100,1000]
R2_test=[]
for i in range(11):
    ridge=Ridge(alpha[i])
    ridge.fit(X_train,y_train)
    y_train_pred_r=ridge.predict(X_train)
    y_test_pred_r=ridge.predict(X_test)
    R2_test.append(ridge.score(X_test,y_test))
    print('MSE train: %.3f, test: %.3f' % (mean_squared_error(y_train, y_train_pred_r),mean_squared_error(y_test, y_test_pred_r)))
    print('R square train: %.3f, test: %.3f' %(ridge.score(X_train,y_train),ridge.score(X_test, y_test)))
alpha_optimal_index=R2_test.index(max(R2_test))
alpha_optimal=alpha[alpha_optimal_index]
print("Optimal alpha is",alpha_optimal)
ridge=Ridge(alpha[alpha_optimal_index])
ridge.fit(X_train,y_train)
print("Intercept:",ridge.intercept_)
print("Coefficients",list(zip(['cement', 'slag', 'ash', 'water', 'superplastic','coarseagg','fineagg','age'],ridge.coef_.tolist()[0])))
y_train_pred_r=ridge.predict(X_train)
y_test_pred_r=ridge.predict(X_test)
residual_plot(y_train_pred_r,y_test_pred_r,y_train,y_test)

#part 3.2
alpha=[0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,1,10,100,1000]
R2_test1=[]
for i in range(11):
    lasso=Lasso(alpha[i])
    lasso.fit(X_train,y_train)
    y_train_pred_l=lasso.predict(X_train)
    y_test_pred_l=lasso.predict(X_test)
    R2_test1.append(lasso.score(X_test,y_test))
    MSE_train=mean_squared_error(y_train, y_train_pred_l)
    print(alpha[i],'MSE train: %.3f, test: %.3f' % (mean_squared_error(y_train, y_train_pred_l),mean_squared_error(y_test, y_test_pred_l)))
    print('R square train: %.3f, test: %.3f' %(lasso.score(X_train,y_train),lasso.score(X_test, y_test)))
alpha_optimal_index=R2_test1.index(max(R2_test1))
alpha_optimal=alpha[alpha_optimal_index]
print("Optimal alpha is",alpha_optimal)
lasso=Lasso(alpha[alpha_optimal_index])
lasso.fit(X_train,y_train)
print("Intercept:",lasso.intercept_)
print("Coefficients",list(zip(['cement', 'slag', 'ash', 'water', 'superplastic','coarseagg','fineagg','age'],lasso.coef_.tolist())))
y_train_pred_l=lasso.predict(X_train)
y_train_pred_l=y_train_pred_l.reshape((-1,1))
y_test_pred_l=lasso.predict(X_test)
y_test_pred_l=y_test_pred_l.reshape((-1,1))
residual_plot(y_train_pred_l,y_test_pred_l,y_train,y_test)
    
#part 3.3
l1ratio=[0,0.01,0.05,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1]
R2_test2=[]
for i in range(13):
    elasticnet=ElasticNet(l1_ratio=l1ratio[i])
    elasticnet.fit(X_train,y_train)
    y_train_pred_e=elasticnet.predict(X_train)
    y_test_pred_e=elasticnet.predict(X_test)
    R2_test2.append(elasticnet.score(X_test,y_test))
    MSE_train=mean_squared_error(y_train, y_train_pred_e)
    print(l1ratio[i],'MSE train: %.3f, test: %.3f' % (mean_squared_error(y_train, y_train_pred_e),mean_squared_error(y_test, y_test_pred_e)))
    print('R square train: %.3f, test: %.3f' %(elasticnet.score(X_train,y_train),elasticnet.score(X_test, y_test)))
l1ratio_optimal_index=R2_test2.index(max(R2_test2))
l1ratio_optimal=l1ratio[l1ratio_optimal_index]
print("Optimal l1ratio is",l1ratio_optimal)
elasticnet=ElasticNet(l1ratio[l1ratio_optimal_index])
elasticnet.fit(X_train,y_train)
print("Intercept:",elasticnet.intercept_)
print("Coefficients",list(zip(['cement', 'slag', 'ash', 'water', 'superplastic','coarseagg','fineagg','age'],elasticnet.coef_.tolist())))
y_train_pred_e=elasticnet.predict(X_train)
y_train_pred_e=y_train_pred_e.reshape(-1,1)
y_test_pred_e=elasticnet.predict(X_test)
y_test_pred_e=y_test_pred_e.reshape(-1,1)
residual_plot(y_train_pred_e,y_test_pred_e,y_train,y_test)
